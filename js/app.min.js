const storage = new Storage;
storage.get();
const weather = new Weather(storage.city),
    ui = new UI,
    ac = new Autocomplete;
let currentRES;
const xlabels = [];
const ytemps = [];

// let apidata;



function initial() {
    const e = window.location.search.substring(window.location.search.indexOf("=") + 1).toLowerCase();
    "" != e ? (changeLoc(e), setTimeout((() => window.history.pushState(e, `Weather of ${e}`, window.location.pathname)), 3e3)) : document.addEventListener("DOMContentLoaded", (() => changeLoc(weather.city))), document.querySelector(".toTop").addEventListener("click", (() => {
        document.querySelector(".content-wrapper").scrollTo(0, 0)
    })), document.getElementById("tmpChangeBtn").addEventListener("click", changeTmpUnit), document.querySelector(".content-wrapper").addEventListener("scroll", (() => {
        document.querySelector(".content-wrapper").scrollTop > 300 ? document.querySelector(".toTop").style.opacity = "0.74" : document.querySelector(".toTop").style.opacity = "0"
    })), document.getElementById("city").addEventListener("keyup", (() => ac.getResults())), document.getElementById("w-form").addEventListener("submit", (e => e.preventDefault())), document.getElementById("srchUICls").addEventListener("click", (() => ui.resetSrchUI())), document.getElementById("srchSugg").addEventListener("click", (e => {
        e.preventDefault(), closeModal(), ui.resetSrchUI(), ac.getcityName(e.target.getAttribute("data-link")).then((e => {
            changeLoc(`${e.location.latlon.latitude},${e.location.latlon.longitude}`)
        })).catch((e => console.warn(e)))
    })), document.querySelectorAll(".moreDetails").forEach((e => e.addEventListener("click", (e => {
        e.preventDefault(), ui.paintDetails(currentRES, e.target.getAttribute("data-day")), showModal("locModal2")
    }))))
}

function showModal(e) {
    window.location.href = `#${e}`
}

function closeModal() {
    window.location.href = "#"
}

function changeLoc(e) {
    let t = weather.city;
    weather.changeLocation(e),
        showModal("locModal3"),
        weather.getWeather().then((o => {
            chartit(o), console.log(o),
                o.error ? (closeModal(), ui.paintAlert(weather.city), "object" != e && changeLoc(t), weather.changeLocation(t), storage.setLocation(t)) : (ui.paint(o, storage), currentRES = o, storage.setLocation(weather.city), setTimeout((() => closeModal()), 2e3))
        })).catch((e => console.error(e)))
}

function changeTmpUnit() {
    document.getElementById("unitC").checked ? (ui.changeTmpUnit("C", currentRES), storage.setTempUnit("C")) : (ui.changeTmpUnit("F", currentRES), storage.setTempUnit("F")), closeModal()

}

initial();

// chart implementation
function chartit(adata) {

    let apidata = adata;

    const ctx = document.getElementById('myChart').getContext('2d');

    let chartStatus = Chart.getChart("myChart"); // <canvas> id
    if (chartStatus != undefined) {
        chartStatus.destroy();
         xlabels.length = 0;
        ytemps.length = 0;
    }
    //-- End of chart destroy   

    let i = 0;
    console.log(apidata);

    while (i < 24) {
        //    if(document.getElementById("unitC").checked)
        ytemps.push(apidata.forecast.forecastday[0].hour[i].temp_c);
        // else ytemps.push(apidata.forecast.forecastday[0].hour[i].temp_f);

        xlabels.push(i + ":00")
        i++;
    }

    console.log(xlabels);
    const myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: xlabels,
            datasets: [{
                label: 'Temp.',
                data: ytemps,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: ['rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            maintainAspectRatio	:false,
        scales: {
            y: {
                ticks: {
                    // Include a degree sign in the ticks
                    callback: function(value, index, values) {
                        return value + 'Â°' ;
                    }
                    , color: 'rgb(0,128,0)'
,
                }
            }, x: {
                ticks: {
                   color: 'rgb(24, 144, 255)'
                }
            }

        }
    }
    });
}